==10984== Memcheck, a memory error detector
==10984== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==10984== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==10984== Command: ./ex6
==10984== Parent PID: 10069
==10984== 
==10984== Invalid read of size 1
==10984==    at 0x484EC26: strlen (vg_replace_strmem.c:501)
==10984==    by 0x48E6DB0: __vfprintf_internal (vfprintf-internal.c:1517)
==10984==    by 0x48D081E: printf (printf.c:33)
==10984==    by 0x109290: main (ex6.c:18)
==10984==  Address 0x41 is not stack'd, malloc'd or (recently) free'd
==10984== 
==10984== 
==10984== Process terminating with default action of signal 11 (SIGSEGV)
==10984==  Access not within mapped region at address 0x41
==10984==    at 0x484EC26: strlen (vg_replace_strmem.c:501)
==10984==    by 0x48E6DB0: __vfprintf_internal (vfprintf-internal.c:1517)
==10984==    by 0x48D081E: printf (printf.c:33)
==10984==    by 0x109290: main (ex6.c:18)
==10984==  If you believe this happened as a result of a stack
==10984==  overflow in your program's main thread (unlikely but
==10984==  possible), you can try to increase the size of the
==10984==  main thread stack using the --main-stacksize= flag.
==10984==  The main thread stack size used in this run was 8388608.
==10984== 
==10984== HEAP SUMMARY:
==10984==     in use at exit: 1,024 bytes in 1 blocks
==10984==   total heap usage: 1 allocs, 0 frees, 1,024 bytes allocated
==10984== 
==10984== LEAK SUMMARY:
==10984==    definitely lost: 0 bytes in 0 blocks
==10984==    indirectly lost: 0 bytes in 0 blocks
==10984==      possibly lost: 0 bytes in 0 blocks
==10984==    still reachable: 1,024 bytes in 1 blocks
==10984==         suppressed: 0 bytes in 0 blocks
==10984== Rerun with --leak-check=full to see details of leaked memory
==10984== 
==10984== For lists of detected and suppressed errors, rerun with: -s
==10984== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
